<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Log;
use Statamic\Facades\Entry;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Http;
use Statamic\Http\Controllers\GlideController;

Route::get('/img/{path?}', function ($path = null) {
    if (!$path) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –æ—à–∏–±–∫—É 404
        return response()->file(public_path('assets/placeholder.jpg'));
    }
    
    return app(GlideController::class)->generateByPath($path);
})->where('path', '.*')->name('statamic.glide.generateByPath');



// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
Route::post('/api/telegram-property', function (Request $request) {
    try {
        Log::info('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram –±–æ—Ç–∞');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        $token = $request->bearerToken();
        $expectedToken = env('TELEGRAM_API_TOKEN');
        
        if (!$token || $token !== $expectedToken) {
            return response()->json(['success' => false, 'message' => 'Unauthorized'], 401);
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º assets_array
        $validated = $request->validate([
            'title' => 'required|string',
            'type' => 'required|in:rent,buy',
            'price' => 'required|integer',
            'address' => 'required|string',
            'district' => 'required|in:Mamaia,Constanta,Navodari,Ovidiu,Lumina',
            'floor' => 'required|integer',
            'rooms' => 'required|integer',
            'has_lift' => 'required|boolean',
            'has_balcony' => 'required|boolean',
            'bathroom' => 'required|integer|min:1',
            'type_home' => 'required|in:–∫–≤–∞—Ä—Ç–∏—Ä–∞,–¥–æ–º,–≤–∏–ª–ª–∞',
            'nearbu' => 'required|string',
            'date_use' => 'required|string',
            'apartment_area' => 'required|integer',
            'description' => 'required|string',
            'images' => 'sometimes|array',
            'images.*' => 'sometimes|url',
            'assets_array' => 'sometimes|array', // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            'assets_array.*' => 'sometimes|url'
        ]);
        
        Log::info('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã', $validated);
        
        // ===== –ó–ê–ì–†–£–ó–ö–ê –ì–õ–ê–í–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
        $savedImages = [];

        if (!empty($validated['images'])) {
            foreach ($validated['images'] as $index => $imageUrl) {
                try {
                    Log::info("üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {$index}: {$imageUrl}");
                    
                    $imageData = downloadImage($imageUrl);
                    if (!$imageData) {
                        Log::warning("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
                        continue;
                    }
                    
                    $filename = 'property-main-' . time() . '-' . $index . '.jpg';
                    $savedPath = saveImageToAssets($imageData, $filename, 'properties');
                    
                    if ($savedPath) {
                        $savedImages[] = $savedPath;
                        Log::info("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {$savedPath}");
                    }
                    
                } catch (\Exception $e) {
                    Log::error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " . $e->getMessage());
                    continue;
                }
            }
        }
        
        // ===== –ó–ê–ì–†–£–ó–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
        $savedAssetsArray = [];

        if (!empty($validated['assets_array'])) {
            foreach ($validated['assets_array'] as $index => $imageUrl) {
                try {
                    Log::info("üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {$index}: {$imageUrl}");
                    
                    $imageData = downloadImage($imageUrl);
                    if (!$imageData) {
                        Log::warning("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
                        continue;
                    }
                    
                    $filename = 'property-asset-' . time() . '-' . $index . '.jpg';
                    $savedPath = saveImageToAssets($imageData, $filename, 'properties');
                    
                    if ($savedPath) {
                        $savedAssetsArray[] = $savedPath;
                        Log::info("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {$savedPath}");
                    }
                    
                } catch (\Exception $e) {
                    Log::error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " . $e->getMessage());
                    continue;
                }
            }
        }
        
        // –°–û–•–†–ê–ù–ï–ù–ò–ï –í STATAMIC
        $entry = Entry::make()
            ->collection('properties')
            ->data([
                'title' => $validated['title'],
                'type' => $validated['type'],
                'price' => $validated['price'],
                'address' => $validated['address'],
                'district' => $validated['district'],
                'floor' => $validated['floor'],
                'rooms' => $validated['rooms'],
                'has_lift' => $validated['has_lift'],
                'has_balcony' => $validated['has_balcony'],
                'bathroom' => $validated['bathroom'],
                'type_home' => $validated['type_home'],
                'nearbu' => $validated['nearbu'],
                'date_use' => $validated['date_use'],
                'apartment_area' => $validated['apartment_area'],
                'description' => $validated['description'],
                'images' => $savedImages,
                'assets_array' => $savedAssetsArray, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                'published' => true
            ]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        $entry->save();
        
        $entryId = $entry->id();
        Log::info('üíæ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', [
            'id' => $entryId,
            'main_images_count' => count($savedImages),
            'assets_images_count' => count($savedAssetsArray)
        ]);
        
        return response()->json([
            'success' => true, 
            'message' => '–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ' . count($savedImages) . ' –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏ ' . count($savedAssetsArray) . ' –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏!',
            'entry_id' => $entryId,
            'images_saved' => count($savedImages),
            'assets_array_saved' => count($savedAssetsArray)
        ]);
        
    } catch (\Exception $e) {
        Log::error('üî• –û—à–∏–±–∫–∞: ' . $e->getMessage(), [
            'file' => $e->getFile(),
            'line' => $e->getLine()
        ]);
        
        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()
        ], 500);
    }
})->withoutMiddleware(['web', 'verify.csrf']);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function downloadImage($url) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    
    $imageData = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    if ($httpCode !== 200 || !$imageData) {
        Log::warning("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP {$httpCode}");
        return null;
    }
    
    return $imageData;
}

function saveImageToAssets($imageData, $filename, $folder = 'properties') {
    $assetsPath = public_path('assets/' . $folder);
    if (!file_exists($assetsPath)) {
        mkdir($assetsPath, 0755, true);
    }
    
    $fullPath = $assetsPath . '/' . $filename;
    
    if (file_put_contents($fullPath, $imageData) === false) {
        Log::warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª");
        return null;
    }
    
    return $folder . '/' . $filename;
}
// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
Route::delete('/api/telegram-property/delete-by-title', function (Request $request) {
    try {
        Log::info('üóëÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        $token = $request->bearerToken();
        $expectedToken = env('TELEGRAM_API_TOKEN');
        
        if (!$token || $token !== $expectedToken) {
            Log::warning('‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É');
            return response()->json(['success' => false, 'message' => 'Unauthorized'], 401);
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        $validated = $request->validate([
            'title' => 'required|string'
        ]);
        
        $title = $validated['title'];
        Log::info("üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º: {$title}");
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö
        $allEntries = Entry::whereCollection('properties')->all();
        $filteredEntries = [];
        
        foreach ($allEntries as $entry) {
            if (stripos($entry->get('title'), $title) !== false) {
                $filteredEntries[] = $entry;
            }
        }
        
        Log::info("üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: " . count($filteredEntries));
        
        if (count($filteredEntries) === 0) {
            return response()->json([
                'success' => false,
                'message' => '–ó–∞–ø–∏—Å–µ–π —Å —Ç–∞–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
            ], 404);
        }
        
        $count = 0;
        foreach ($filteredEntries as $entry) {
            try {
                $entry->delete();
                $count++;
                Log::info("‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: " . $entry->id());
            } catch (\Exception $e) {
                Log::error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {$entry->id()}: " . $e->getMessage());
            }
        }
        
        Log::info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {$count}");
        
        return response()->json([
            'success' => true, 
            'message' => "–£–¥–∞–ª–µ–Ω–æ $count –∑–∞–ø–∏—Å–µ–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{$title}'."
        ]);
        
    } catch (\Illuminate\Validation\ValidationException $e) {
        Log::error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: ' . json_encode($e->errors()));
        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' . json_encode($e->errors())
        ], 422);
    } catch (\Exception $e) {
        Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: ' . $e->getMessage() . ' –≤ —Ñ–∞–π–ª–µ ' . $e->getFile() . ' –Ω–∞ —Å—Ç—Ä–æ–∫–µ ' . $e->getLine());
        
        return response()->json([
            'success' => false,
            'message' => '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' . $e->getMessage()
        ], 500);
    }
})->withoutMiddleware(['web', 'verify.csrf']);
// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
Route::get('/api/telegram-property/list', function (Request $request) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        $token = $request->bearerToken();
        $expectedToken = env('TELEGRAM_API_TOKEN');
        
        if (!$token || $token !== $expectedToken) {
            return response()->json(['success' => false, 'message' => 'Unauthorized'], 401);
        }
        
        $entries = Entry::whereCollection('properties')
            ->sortBy('date')
            ->map(function ($entry) {
                return [
                    'id' => $entry->id(),
                    'title' => $entry->get('title'),
                    'price' => $entry->get('price'),
                    'date' => $entry->date() ? $entry->date()->timestamp : null,
                    'published' => $entry->published()
                ];
            })
            ->values()
            ->all();
        
        return response()->json([
            'success' => true, 
            'entries' => $entries
        ]);
        
    } catch (\Exception $e) {
        Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: ' . $e->getMessage());
        
        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: ' . $e->getMessage()
        ], 500);
    }
})->withoutMiddleware(['web', 'verify.csrf']);

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
Route::delete('/api/telegram-property/delete/all', function (Request $request) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        $token = $request->bearerToken();
        $expectedToken = env('TELEGRAM_API_TOKEN');
        
        if (!$token || $token !== $expectedToken) {
            return response()->json(['success' => false, 'message' => 'Unauthorized'], 401);
        }
        
        $entries = Entry::whereCollection('properties')->get();
        $count = 0;
        
        foreach ($entries as $entry) {
            $entry->delete();
            $count++;
        }
        
        return response()->json([
            'success' => true, 
            'message' => "–£–¥–∞–ª–µ–Ω–æ $count –∑–∞–ø–∏—Å–µ–π."
        ]);
        
    } catch (\Exception $e) {
        Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' . $e->getMessage());
        
        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' . $e->getMessage()
        ], 500);
    }
})->withoutMiddleware(['web', 'verify.csrf']);

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ ID
Route::delete('/api/telegram-property/delete/{id}', function ($id, Request $request) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        $token = $request->bearerToken();
        $expectedToken = env('TELEGRAM_API_TOKEN');
        
        if (!$token || $token !== $expectedToken) {
            return response()->json(['success' => false, 'message' => 'Unauthorized'], 401);
        }
        
        $entry = Entry::find($id);
        
        if (!$entry) {
            return response()->json([
                'success' => false,
                'message' => '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
            ], 404);
        }
        
        $entry->delete();
        
        return response()->json([
            'success' => true, 
            'message' => '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.'
        ]);
        
    } catch (\Exception $e) {
        Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' . $e->getMessage());
        
        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ' . $e->getMessage()
        ], 500);
    }
})->withoutMiddleware(['web', 'verify.csrf']);

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
Route::delete('/api/telegram-property/delete/drafts', function (Request $request) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        $token = $request->bearerToken();
        $expectedToken = env('TELEGRAM_API_TOKEN');
        
        if (!$token || $token !== $expectedToken) {
            return response()->json(['success' => false, 'message' => 'Unauthorized'], 401);
        }
        
        $entries = Entry::whereCollection('properties')
                        ->where('published', false)
                        ->get();
        
        $count = 0;
        foreach ($entries as $entry) {
            $entry->delete();
            $count++;
        }
        
        return response()->json([
            'success' => true, 
            'message' => "–£–¥–∞–ª–µ–Ω–æ $count —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤."
        ]);
        
    } catch (\Exception $e) {
        Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: ' . $e->getMessage());
        
        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: ' . $e->getMessage()
        ], 500);
    }
})->withoutMiddleware(['web', 'verify.csrf']);

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
Route::delete('/api/telegram-property/delete/old', function (Request $request) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        $token = $request->bearerToken();
        $expectedToken = env('TELEGRAM_API_TOKEN');
        
        if (!$token || $token !== $expectedToken) {
            return response()->json(['success' => false, 'message' => 'Unauthorized'], 401);
        }
        
        $thirtyDaysAgo = now()->subDays(30)->timestamp;
        
        $entries = Entry::whereCollection('properties')
                        ->where('date', '<', $thirtyDaysAgo)
                        ->get();
        
        $count = 0;
        foreach ($entries as $entry) {
            $entry->delete();
            $count++;
        }
        
        return response()->json([
            'success' => true, 
            'message' => "–£–¥–∞–ª–µ–Ω–æ $count —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)."
        ]);
        
    } catch (\Exception $e) {
        Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: ' . $e->getMessage());
        
        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: ' . $e->getMessage()
        ], 500);
    }
})->withoutMiddleware(['web', 'verify.csrf']);

// API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞
Route::post('/submit-application', function (Request $request) {
    try {
        Log::info('üìã –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞', $request->all());
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        $validated = $request->validate([
            'full_name' => 'required|string|max:255',
            'telegram' => 'required|string|max:255',
            'phone' => 'required|string|max:20',
            'email' => 'required|email|max:255',
            'budget' => 'nullable|string|max:100',
            'consultation_type' => 'nullable|string|in:–ø–æ–∫—É–ø–∫–∞,–∞—Ä–µ–Ω–¥–∞',
            'checkin_date' => 'nullable|date',
            'period' => 'nullable|string|max:50',
            'people_count' => 'nullable|integer|min:1',
            'message' => 'nullable|string',
            'property_id' => 'nullable|string',
            'property_title' => 'nullable|string|max:255',
            'property_price' => 'nullable|string|max:100',
            'property_type' => 'nullable|string|in:rent,buy'
        ]);
        
        Log::info('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã', $validated);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º config() –≤–º–µ—Å—Ç–æ env() –¥–ª—è production
        $botToken = config('services.telegram.bot_token');
        $adminChatId = config('services.telegram.admin_chat_id');
        
        Log::info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram:', [
            'bot_token' => $botToken ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'admin_chat_id' => $adminChatId ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        ]);
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if ($botToken && $adminChatId) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            $telegramMessage = "üìã *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:*\n\n";
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (!empty($validated['property_title'])) {
                $propertyType = $validated['property_type'] == 'rent' ? '–ê—Ä–µ–Ω–¥–∞' : '–ü–æ–∫—É–ø–∫–∞';
                $telegramMessage .= "üè† *–û–±—ä–µ–∫—Ç:* {$validated['property_title']}\n";
                $telegramMessage .= "üí∞ *–¶–µ–Ω–∞:* {$validated['property_price']} ‚Ç¨\n";
                $telegramMessage .= "üîñ *–¢–∏–ø:* {$propertyType}\n";
                if (!empty($validated['property_id'])) {
                    $telegramMessage .= "üÜî *ID –æ–±—ä–µ–∫—Ç–∞:* {$validated['property_id']}\n";
                }
                $telegramMessage .= "\n";
            }
            
            $telegramMessage .= "üë§ *–§–ò–û:* " . $validated['full_name'] . "\n";
            $telegramMessage .= "üì± *Telegram:* " . $validated['telegram'] . "\n";
            $telegramMessage .= "üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* " . $validated['phone'] . "\n";
            $telegramMessage .= "üìß *Email:* " . $validated['email'] . "\n";
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±—é–¥–∂–µ—Ç –∏ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –æ–±—ä–µ–∫—Ç—É
            if (empty($validated['property_title'])) {
                if (!empty($validated['budget'])) {
                    $telegramMessage .= "üí∞ *–ë—é–¥–∂–µ—Ç:* " . $validated['budget'] . "\n";
                }
                
                if (!empty($validated['consultation_type'])) {
                    $telegramMessage .= "üè† *–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:* " . $validated['consultation_type'] . "\n";
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∞—Ä–µ–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if (!empty($validated['checkin_date'])) {
                $telegramMessage .= "üìÖ *–î–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è:* " . $validated['checkin_date'] . "\n";
            }
            
            if (!empty($validated['period'])) {
                $telegramMessage .= "‚è±Ô∏è *–ü–µ—Ä–∏–æ–¥ –∑–∞—Å–µ–ª–µ–Ω–∏—è:* " . $validated['period'] . "\n";
            }
            
            if (!empty($validated['people_count'])) {
                $telegramMessage .= "üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:* " . $validated['people_count'] . "\n";
            }
            
            if (!empty($validated['message'])) {
                $telegramMessage .= "üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* " . $validated['message'] . "\n";
            }
            
            $telegramMessage .= "\nüïí *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:* " . now()->format('d.m.Y H:i');
            
 // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram
            $response = Http::post("https://api.telegram.org/bot{$botToken}/sendMessage", [
                'chat_id' => $adminChatId,
                'text' => $telegramMessage,
                'parse_mode' => 'Markdown'
            ]);
            
            if ($response->successful()) {
                Log::info('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram');
            } else {
                Log::error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ' . $response->body());
            }
        } else {
            Log::warning('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
        }
        
        return response()->json(['success' => true, 'message' => '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!']);
        
    } catch (\Exception $e) {
        Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: ' . $e->getMessage());
        return response()->json(['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'], 500);
    }
})->withoutMiddleware(['web', 'verify.csrf']);

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π/–±–ª–æ–≥-–ø–æ—Å—Ç–æ–≤
Route::post('/api/telegram-blok', function (Request $request) {
    try {
        Log::info('üì∞ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç Telegram –±–æ—Ç–∞');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        $token = $request->bearerToken();
        $expectedToken = env('TELEGRAM_API_TOKEN');
        
        if (!$token || $token !== $expectedToken) {
            Log::warning('‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ API –Ω–æ–≤–æ—Å—Ç–µ–π');
            return response()->json(['success' => false, 'message' => 'Unauthorized'], 401);
        }
        
        Log::info('üì® –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:', $request->all());
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'blog_text' => 'required|string',
            'logo_blog' => 'sometimes|array',
            'logo_blog.*' => 'sometimes|url'
        ]);
        
        Log::info('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã', $validated);
        
        // ===== –ó–ê–ì–†–£–ó–ö–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
        $savedImages = [];

        if (!empty($validated['logo_blog'])) {
            foreach ($validated['logo_blog'] as $index => $imageUrl) {
                try {
                    Log::info("üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {$index}: {$imageUrl}");
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º cURL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_URL, $imageUrl);
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
                    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
                    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
                    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                    
                    $imageData = curl_exec($ch);
                    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                    curl_close($ch);
                    
                    if ($httpCode !== 200 || !$imageData) {
                        Log::warning("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP {$httpCode}");
                        continue;
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ public/assets/blok
                    $assetsPath = public_path('assets/blok');
                    if (!file_exists($assetsPath)) {
                        mkdir($assetsPath, 0755, true);
                    }
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    $filename = 'blok-' . time() . '-' . $index . '.jpg';
                    $fullPath = $assetsPath . '/' . $filename;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    if (file_put_contents($fullPath, $imageData) === false) {
                        Log::warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª");
                        continue;
                    }
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è Statamic
                    $savedImages[] = 'blok/' . $filename;
                    
                    Log::info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ assets: blok/{$filename}");
                    
                } catch (\Exception $e) {
                    Log::error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: " . $e->getMessage());
                    continue;
                }
            }
        }
        // ===== –ö–û–ù–ï–¶ –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====
        
        // –°–û–•–†–ê–ù–ï–ù–ò–ï –í STATAMIC (–∫–æ–ª–ª–µ–∫—Ü–∏—è blok)
        $entry = Entry::make()
            ->collection('catalog') // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            ->data([
                'title' => $validated['title'],
                'blog_text' => $validated['blog_text'],
                'logo_blog' => $savedImages,
                'published' => true
                // slug –∏ date –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã Statamic
            ]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        $entry->save();
        
        $entryId = $entry->id();
        Log::info('üíæ –ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é blok', [
            'id' => $entryId,
            'title' => $validated['title']
        ]);
        
        return response()->json([
            'success' => true, 
            'message' => '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
            'entry_id' => $entryId,
            'images_saved' => count($savedImages)
        ]);
        
    } catch (\Illuminate\Validation\ValidationException $e) {
        Log::error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: ' . json_encode($e->errors()));
        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' . implode(', ', array_flatten($e->errors()))
        ], 422);
    } catch (\Exception $e) {
        Log::error('üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: ' . $e->getMessage());
        return response()->json([
            'success' => false,
            'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()
        ], 500);
    }
})->withoutMiddleware(['web', 'verify.csrf']);


// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã...
Route::statamic('catalog', 'catalog.index');
Route::statamic('about', 'about.index');
Route::statamic('services', 'services.index');
Route::statamic('open_bisnes', 'open_bisnes.index');
Route::statamic('consalt', 'consalt.index');
Route::statamic('contact', 'contact.index');
Route::statamic('blog', 'contact.show');